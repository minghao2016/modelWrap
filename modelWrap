#!/bin/bash
#
# ARG_OPTIONAL_SINGLE([sequence],[s],[sequence file in .fasta format, including all sequences to process])
# ARG_OPTIONAL_SINGLE([template],[t],[template file in .pdb format])
# ARG_HELP([The general script's help msg])
# ARG_OPTIONAL_REPEATED([include],[I],[Directory for temporary folders],['/tmp'])

# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='sthI'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_sequence=
_arg_template=
_arg_include=('/tmp')


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-s|--sequence <arg>] [-t|--template <arg>] [-h|--help] [-I|--include <arg>]\n' "$0"
	printf '\t%s\n' "-s, --sequence: sequence file in .fasta format, including all sequences to process (no default)"
	printf '\t%s\n' "-t, --template: template file in .pdb format (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s' "-I, --include: Directory for temporary folders (default array elements:"
	printf " '%s'" '/tmp'
	printf ')\n'
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--sequence)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_sequence="$2"
				shift
				;;
			--sequence=*)
				_arg_sequence="${_key##--sequence=}"
				;;
			-s*)
				_arg_sequence="${_key##-s}"
				;;
			-t|--template)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_template="$2"
				shift
				;;
			--template=*)
				_arg_template="${_key##--template=}"
				;;
			-t*)
				_arg_template="${_key##-t}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-I|--include)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_include+=("$2")
				shift
				;;
			--include=*)
				_arg_include+=("${_key##--include=}")
				;;
			-I*)
				_arg_include+=("${_key##-I}")
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


#### Variables
SECONDS=0
TEMP="$_arg_include"
WPATH="$(pwd)"
sequenceName="$_arg_sequence"
sequenceNameNoExt=$(echo $sequenceName | cut -d "." -f 1)
templateName="$_arg_template"
templateNameNoExt=$(echo $templateName | cut -d "." -f 1)

### Functions
timeNeed () {
ELAPSED="$(($SECONDS / 3600))hrs $((($SECONDS / 60) % 60))min $(($SECONDS % 60))sec"
printf "|%-30s%30s|\n" "Program finished within:" "$ELAPSED"
}

check () {
#checks if seq and pdb file are given
emptyFormat="|%-60s|\n"
if [[ -z "$_arg_sequence" || -z "$_arg_template" ]]; then
	printf "$emptyFormat" "       !no sequence.fasta and/or template.pdb given!"
	printf "$emptyFormat" "              press modelWrap -h for help!"
else
    runScript
fi
}

seperateFasta () {
	printf "|%-60s|\n" "Seperating .fasta file into single files..."
	while read line
		do
    			if [[ ${line:0:1} == '>' ]]
    		then
        		outfile=${line#>}.fa
        		echo $line > $outfile
    		else
        		echo $line >> $outfile
    		fi
	done < $sequenceName
	printf "|%-60s|\n" "..."
}


convertFasta () {
	printf "|%-60s|\n" "Converting all .fasta files into .ali format..."
	fastaFile=$(ls *.fa)
        for i in $fastaFile;do
		name=$(echo $i | cut -d "." -f 1)
		cp $name.fa $name.temp
		sed -i '1d' $name.temp
		grep pattern $name.temp | tr '\n' ' ' # consolidates multiple lines into one
		echo ">P1;$name" > $name.ali
		echo "sequence:$name:::::::0.00: 0.00" >> $name.ali
		cat $name.temp >> $name.ali
		rm $name.temp
		sed -i '${s/$/*/}' $name.ali
	done
        printf "|%-60s|\n" "..."
}


changeAlign2d () {
printf "|%-60s|\n" "Creating alignment files for modeller..."
aliFile=$(ls *.ali)
for i in $aliFile;do
	aliname=$(echo $i | cut -d "." -f 1)
	printf "from modeller import *

env = environ()
aln = alignment(env)
mdl = model(env, file='$templateNameNoExt', model_segment=('FIRST:A','LAST:A'))
aln.append_model(mdl, align_codes='$templateNameNoExt', atom_files='$templateName')
aln.append(file='$i', align_codes='$aliname')
aln.align2d()
aln.write(file='${aliname}-$templateNameNoExt.ali', alignment_format='PIR')" > ${aliname}-align2d.py
done
printf "|%-60s|\n" "..."
}

runAlignment () {
printf "|%-60s|\n" "Generating alignment based on structure..."
align2dFile=$(ls *align2d.py)
for i in $align2dFile;do
        align2dName=$(echo $i | cut -d "." -f 1)
        python3 $i > $align2dName.log &
done
wait
printf "|%-60s|\n" "..."
}

changeModel () {
printf "|%-60s|\n" "Creating automodel files for modeller..."
aliFile=$(ls *-$templateNameNoExt.ali)
for i in $aliFile;do
        modelName=$(echo $i | cut -d "." -f 1)
        seqName=$(echo $i | cut -d "-" -f 1)
        printf "# Comparative modeling by the automodel class, using multiple processors
from modeller import *
from modeller.automodel import *    # Load the automodel class
from modeller.parallel import *

# Use 2 CPUs in a parallel job on this machine
j = job()
j.append(local_slave())
#j.append(local_slave())

log.verbose()    # request verbose output
env = environ()  # create a new MODELLER environment to build this model in

a = automodel(env,
              alnfile  = '$modelName.ali',     # alignment filename
              knowns   = '$templateNameNoExt',              # codes of the templates
              sequence = '$seqName')              # code of the target
a.starting_model= 1                 # index of the first model
a.ending_model  = 1                 # index of the last model
                                    # (determines how many models to calculate)
a.use_parallel_job(j)               # Use the job for model building
a.make()                            # do the actual comparative modelingi" > ${modelName}-automodel.py
done
printf "|%-60s|\n" "..."
}

runModeling () {
printf "|%-60s|\n" "Generating homology models..."
automodelFile=$(ls *automodel.py)
for i in $automodelFile;do
	name=$(echo $i | cut -d "-" -f 1)
	python3 $i > $name.log &
done
wait
printf "|%-60s|\n" "..."
}

cleanUp () {
#cleans up the directory
printf "|%-60s|\n" "Cleaning up directory..."
mkdir fastaFiles >/dev/null 2>/dev/null
mkdir aliFiles >/dev/null 2>/dev/null
mkdir align2dFiles >/dev/null 2>/dev/null
mkdir automodelFiles >/dev/null 2>/dev/null
mkdir modelFiles >/dev/null 2>/dev/null
mv *.fa fastaFiles >/dev/null 2>/dev/null
mv *.ali aliFiles >/dev/null 2>/dev/null
mv *-align2d.py align2dFiles >/dev/null 2>/dev/null
mv *-automodel.py automodelFiles >/dev/null 2>/dev/null
mv *.log modelFiles >/dev/null 2>/dev/null
mv *.ini modelFiles >/dev/null 2>/dev/null
mv *.sch modelFiles >/dev/null 2>/dev/null
mv *.rsr modelFiles >/dev/null 2>/dev/null
mv *.slave* modelFiles >/dev/null 2>/dev/null
mv *.????????? modelFiles >/dev/null 2>/dev/null
rm align2d.py >/dev/null 2>/dev/null
rm automodel.py >/dev/null 2>/dev/null

printf "|%-60s|\n" "..."
}

### SCRIPT
runScript () {
seperateFasta
convertFasta
changeAlign2d
runAlignment
changeModel
runModeling
cleanUp
timeNeed
}
check
# ] <-- needed because of Argbash
